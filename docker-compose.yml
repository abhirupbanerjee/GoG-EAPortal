version: '3.8'

networks:
  gog_network:
    driver: bridge

volumes:
  minio_data:
  es_data:
  db_data:
  traefik_acme:
  traefik_logs:
  wiki_db_data:
  wiki_data:
  paperless_db_data:
  paperless_data:
  paperless_media:
  paperless_export:
  paperless_redis:


services:

  # ============================================
  # TRAEFIK - Reverse Proxy & SSL
  # ============================================
  traefik:
    image: traefik:v3.0
    container_name: traefik
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    networks:
      - gog_network
    ports:
      - "80:80"
      - "443:443"
    environment:
      - LETS_ENCRYPT_EMAIL=${LETS_ENCRYPT_EMAIL}
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./traefik.yml:/traefik.yml:ro
      - traefik_acme:/acme
      - traefik_logs:/var/log/traefik
    labels:
      - "traefik.enable=true"
      
      # Dashboard
      - "traefik.http.routers.dashboard.rule=Host(`${TRAEFIK_DOMAIN}`)"
      - "traefik.http.routers.dashboard.service=api@internal"
      - "traefik.http.routers.dashboard.entrypoints=websecure"
      - "traefik.http.routers.dashboard.tls.certresolver=letsencrypt"
      - "traefik.http.routers.dashboard.middlewares=dashboard-auth"
      
      # Basic Auth for Dashboard
      - "traefik.http.middlewares.dashboard-auth.basicauth.users=${TRAEFIK_DASHBOARD_USER}:${TRAEFIK_DASHBOARD_PASSWORD}"

  # ============================================
  # FRONTEND - React Application
  # ============================================
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: frontend
    restart: unless-stopped
    networks:
      - gog_network
    env_file:
      - .env
    environment:
      - API_BASE_URL=${API_URL}
      - IMAGE_BASE_URL=${CMS_URL}
      - MINIO_BASE_URL=${MINIO_URL}
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.frontend.rule=Host(`${FRONTEND_DOMAIN}`)"
      - "traefik.http.routers.frontend.entrypoints=websecure"
      - "traefik.http.routers.frontend.tls.certresolver=letsencrypt"
      - "traefik.http.services.frontend.loadbalancer.server.port=8081"

  # ============================================
  # BACKEND - FastAPI
  # ============================================
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.backend
    container_name: backend
    restart: unless-stopped
    networks:
      - gog_network
    env_file:
      - .env
    environment:
      - CORS_ORIGINS=${CORS_ORIGINS}
      - MINIO_PUBLIC_URL=${MINIO_URL}
      - DRUPAL_PUBLIC_URL=${CMS_URL}
      - FRONTEND_PUBLIC_URL=${FRONTEND_URL}
    depends_on:
      - elasticsearch
      - minio
      - drupal
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.backend.rule=Host(`${API_DOMAIN}`)"
      - "traefik.http.routers.backend.entrypoints=websecure"
      - "traefik.http.routers.backend.tls.certresolver=letsencrypt"
      - "traefik.http.services.backend.loadbalancer.server.port=8000"

  # ============================================
  # DRUPAL - Headless CMS
  # ============================================
  drupal:
    build:
      context: ./drupal-docker
      dockerfile: Dockerfile
    container_name: drupal
    restart: unless-stopped
    networks:
      - gog_network
    volumes:
      - ./drupal-docker/drupal_t:/var/www/html
    depends_on:
      - db
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.drupal.rule=Host(`${CMS_DOMAIN}`)"
      - "traefik.http.routers.drupal.entrypoints=websecure"
      - "traefik.http.routers.drupal.tls.certresolver=letsencrypt"
      - "traefik.http.services.drupal.loadbalancer.server.port=80"

  # ============================================
  # MARIADB - Drupal Database
  # ============================================
  db:
    image: mariadb:10.5
    container_name: drupal_db
    restart: unless-stopped
    networks:
      - gog_network
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
    volumes:
      - db_data:/var/lib/mysql
      - ./drupal-docker/db.sql:/docker-entrypoint-initdb.d/db.sql

  # ============================================
  # MINIO - Object Storage
  # ============================================
  minio:
    image: minio/minio:latest
    container_name: minio
    restart: unless-stopped
    networks:
      - gog_network
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    labels:
      - "traefik.enable=true"
      
      # MinIO API
      - "traefik.http.routers.minio-api.rule=Host(`${MINIO_DOMAIN}`)"
      - "traefik.http.routers.minio-api.entrypoints=websecure"
      - "traefik.http.routers.minio-api.tls.certresolver=letsencrypt"
      - "traefik.http.routers.minio-api.service=minio-api"
      - "traefik.http.services.minio-api.loadbalancer.server.port=9000"
      
      # MinIO Console
      - "traefik.http.routers.minio-console.rule=Host(`${MINIO_CONSOLE_DOMAIN}`)"
      - "traefik.http.routers.minio-console.entrypoints=websecure"
      - "traefik.http.routers.minio-console.tls.certresolver=letsencrypt"
      - "traefik.http.routers.minio-console.service=minio-console"
      - "traefik.http.services.minio-console.loadbalancer.server.port=9001"



  # ------------------------------------------------------------
  # One-time file uploader (runs on same network as MinIO)
  # ------------------------------------------------------------
#  uploader:
#    image: python:3.12-slim
#    working_dir: /app
#    volumes:
#      - ./:/app                      # repo
#      - ./DocumentsToUpload:/data    # host folder -> /data
#    networks:
#      - gog_network
#    depends_on:
#      - minio
#    command: >
#      sh -c "pip install --no-cache-dir -r requirements.txt &&
#             python uploader.py"


  # ============================================
  # ELASTICSEARCH - Search Engine
  # ============================================
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.17.3
    container_name: elasticsearch
    restart: unless-stopped
    networks:
      - gog_network
    environment:
      - discovery.type=single-node
      - ES_JAVA_OPTS=${ES_JAVA_OPTS}
      - xpack.security.enabled=false
      - xpack.security.transport.ssl.enabled=false
      - xpack.security.http.ssl.enabled=false
    volumes:
      - es_data:/usr/share/elasticsearch/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9200/_cluster/health?wait_for_status=yellow&timeout=5s"]
      interval: 30s
      timeout: 10s
      retries: 5
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.elasticsearch.rule=Host(`${SEARCH_DOMAIN}`)"
      - "traefik.http.routers.elasticsearch.entrypoints=websecure"
      - "traefik.http.routers.elasticsearch.tls.certresolver=letsencrypt"
      - "traefik.http.services.elasticsearch.loadbalancer.server.port=9200"

  # ============================================
  # PGADMIN - PostgreSQL Admin (if needed)
  # ============================================
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: pgadmin
    restart: unless-stopped
    networks:
      - gog_network
    environment:
  # ============================================
  # WIKI.JS - Knowledge Base
  # ============================================
  wiki_db:
    image: postgres:15-alpine
    container_name: wiki_db
    restart: unless-stopped
    networks:
      - gog_network
    environment:
      POSTGRES_DB: ${WIKI_DB_NAME}
      POSTGRES_USER: ${WIKI_DB_USER}
      POSTGRES_PASSWORD: ${WIKI_DB_PASSWORD}
    volumes:
      - wiki_db_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${WIKI_DB_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5

  wiki:
    image: requarks/wiki:2
    container_name: wiki
    restart: unless-stopped
    networks:
      - gog_network
    environment:
      DB_TYPE: postgres
      DB_HOST: wiki_db
      DB_PORT: 5432
      DB_USER: ${WIKI_DB_USER}
      DB_PASS: ${WIKI_DB_PASSWORD}
      DB_NAME: ${WIKI_DB_NAME}
    depends_on:
      wiki_db:
        condition: service_healthy
    volumes:
      - wiki_data:/wiki/data
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.wiki.rule=Host(`${WIKI_DOMAIN}`)"
      - "traefik.http.routers.wiki.entrypoints=websecure"
      - "traefik.http.routers.wiki.tls.certresolver=letsencrypt"
      - "traefik.http.services.wiki.loadbalancer.server.port=3000"

  # ============================================
  # PAPERLESS-NGX - Document Management
  # ============================================
  paperless_db:
    image: postgres:15-alpine
    container_name: paperless_db
    restart: unless-stopped
    networks:
      - gog_network
    environment:
      POSTGRES_DB: ${PAPERLESS_DBNAME}
      POSTGRES_USER: ${PAPERLESS_DBUSER}
      POSTGRES_PASSWORD: ${PAPERLESS_DBPASS}
    volumes:
      - paperless_db_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${PAPERLESS_DBUSER}"]
      interval: 10s
      timeout: 5s
      retries: 5

  paperless_redis:
    image: redis:7-alpine
    container_name: paperless_redis
    restart: unless-stopped
    networks:
      - gog_network
    volumes:
      - paperless_redis:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Apache Tika for advanced document parsing
  tika:
    image: apache/tika:latest
    container_name: tika
    restart: unless-stopped
    networks:
      - gog_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9998/tika"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Gotenberg for PDF conversion
  gotenberg:
    image: gotenberg/gotenberg:7
    container_name: gotenberg
    restart: unless-stopped
    networks:
      - gog_network
    command:
      - "gotenberg"
      - "--chromium-disable-javascript=true"
      - "--chromium-allow-list=file:///tmp/.*"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  paperless:
    image: ghcr.io/paperless-ngx/paperless-ngx:latest
    container_name: paperless
    restart: unless-stopped
    networks:
      - gog_network
    environment:
      # Database
      PAPERLESS_DBHOST: ${PAPERLESS_DBHOST}
      PAPERLESS_DBNAME: ${PAPERLESS_DBNAME}
      PAPERLESS_DBUSER: ${PAPERLESS_DBUSER}
      PAPERLESS_DBPASS: ${PAPERLESS_DBPASS}
      PAPERLESS_DBPORT: ${PAPERLESS_DBPORT}
      
      # Redis
      PAPERLESS_REDIS: ${PAPERLESS_REDIS}
      
      # Application
      PAPERLESS_URL: ${PAPERLESS_URL}
      PAPERLESS_SECRET_KEY: ${PAPERLESS_SECRET_KEY}
      PAPERLESS_TIME_ZONE: ${PAPERLESS_TIME_ZONE}
      PAPERLESS_OCR_LANGUAGE: ${PAPERLESS_OCR_LANGUAGE}
      
      # Admin User
      PAPERLESS_ADMIN_USER: ${PAPERLESS_ADMIN_USER}
      PAPERLESS_ADMIN_PASSWORD: ${PAPERLESS_ADMIN_PASSWORD}
      PAPERLESS_ADMIN_MAIL: ${PAPERLESS_ADMIN_MAIL}
      
      # OCR & Processing
      PAPERLESS_OCR_LANGUAGES: ${PAPERLESS_OCR_LANGUAGES}
      PAPERLESS_CONSUMER_POLLING: ${PAPERLESS_CONSUMER_POLLING}
      PAPERLESS_CONSUMER_RECURSIVE: ${PAPERLESS_CONSUMER_RECURSIVE}
      PAPERLESS_CONSUMER_SUBDIRS_AS_TAGS: ${PAPERLESS_CONSUMER_SUBDIRS_AS_TAGS}
      
      # Tika & Gotenberg
      PAPERLESS_TIKA_ENABLED: ${PAPERLESS_TIKA_ENABLED}
      PAPERLESS_TIKA_ENDPOINT: ${PAPERLESS_TIKA_ENDPOINT}
      PAPERLESS_TIKA_GOTENBERG_ENDPOINT: ${PAPERLESS_TIKA_GOTENBERG_ENDPOINT}
    volumes:
      - paperless_data:/usr/src/paperless/data
      - paperless_media:/usr/src/paperless/media
      - paperless_export:/usr/src/paperless/export
      # Optional: Mount a folder for document consumption
      # - ./paperless-consume:/usr/src/paperless/consume
    depends_on:
      paperless_db:
        condition: service_healthy
      paperless_redis:
        condition: service_healthy
      tika:
        condition: service_healthy
      gotenberg:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.paperless.rule=Host(`${DMS_DOMAIN}`)"
      - "traefik.http.routers.paperless.entrypoints=websecure"
      - "traefik.http.routers.paperless.tls.certresolver=letsencrypt"
      - "traefik.http.services.paperless.loadbalancer.server.port=8000"
